package sdCommunity.user.post;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import sdCommunity.conn.Conn;

/**
 * Servlet implementation class SolutionVerify
 */
@WebServlet("/SolutionVerify")
public class SolutionVerify extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public SolutionVerify() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        Conn con = new Conn();
        Connection conn = con.connection;

        String operation = request.getParameter("operation");

        if (operation != null && operation.equals("insert")) {
            // Insert a new verification record
            int uid = Integer.parseInt(request.getParameter("uid"));
            int post_id = Integer.parseInt(request.getParameter("post_id"));
            int s_id = Integer.parseInt(request.getParameter("s_id"));
            int counts = Integer.parseInt(request.getParameter("counts"));

            insertVerification(conn, uid, post_id, s_id, counts);
            response.getWriter().write("Verification record inserted successfully.");
        } else if (operation != null && operation.equals("getCounts")) {
            // Retrieve verification counts
            int post_id = Integer.parseInt(request.getParameter("post_id"));
            int counts = getVerificationCounts(conn, post_id);
            response.getWriter().write(String.valueOf(counts));
        } else {
            response.getWriter().write("Invalid operation.");
        }
    }

    // Insert a new verification record
    private void insertVerification(Connection conn, int uid, int post_id, int s_id, int counts) {
        PreparedStatement stmt = null;

        try {
            String insertQuery = "INSERT INTO verifySolution (uid, post_id, s_id, counts) VALUES (?, ?, ?, ?)";
            stmt = conn.prepareStatement(insertQuery);
            stmt.setInt(1, uid);
            stmt.setInt(2, post_id);
            stmt.setInt(3, s_id);
            stmt.setInt(4, counts);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately
        } finally {
            try {
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    // Retrieve verification counts for a specific post_id
    private int getVerificationCounts(Connection conn, int post_id) {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        int counts = 0;

        try {
            String selectQuery = "SELECT COUNT(*) FROM verifySolution WHERE post_id = ?";
            stmt = conn.prepareStatement(selectQuery);
            stmt.setInt(1, post_id);
            rs = stmt.executeQuery();

            if (rs.next()) {
                counts = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception appropriately
        } finally {
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return counts;
    }

}
